{
  
    
        "post0": {
            "title": "Asynchronous Basics",
            "content": "Note: Threaded programs allow you to create multiple, parallel paths of execution that all share the same memory space. This is both an advantage and a disadvantage. Any memory shared between threads is subject to one or more threads trying to use the same shared memory at the same time. This can lead to data corruption, data read in an invalid state, and data that’s just messy in general. . In threaded programming, the context switch happens under system control, not the programmer. The system controls when to switch contexts and when to give threads access to shared data, thereby changing the context of how the memory is being used. All of these kinds of problems are manageable in threaded code, but it’s difficult to get right, and hard to debug when it’s wrong. .",
            "url": "https://www.sysarch.in//markdown/2022/02/21/asynchronous-extras.html",
            "relUrl": "/markdown/2022/02/21/asynchronous-extras.html",
            "date": " • Feb 21, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Asynchronous Basics",
            "content": "Asynchronous Basics . Before we dewel into async basic, lets understand the sync code behaviour. . Sync . It execute one step a time. Even with all conditional branching, loops and function calls. we can still think in terms of code that a single step at a time. when each step is completed, the program moves to next one. . Real Example . Lets think “techie [our bot]” needs to send message to 100 bot friends for special bot get together. Each bot friends reply with different time delay. So on an average each take 30 miliseconds to reply. The “techie [our bot]” as being superfast bot in these bot society with heavy resource hardware and updated software [As we take care of our bot a lot], it replys in 0.5 miliseconds. As this is non-working day, techie decide to send message and wait for other bot to accept/reject invitations, so time taken would be 30.5 milisecods with each bot. this would lead to total time of 30.5 * 100 = 3050 miliseconds (lazy converter, it will take time to convert into seconds). . Now Scenario has been changed as this would be going to very rough day for techie [bcz our team is on trip, everyone is enjoying !!!]. As techie seeing us ignore, decide to have party with bot friends after works. But it seems as of tight Process Schedule”, techie don’t have 3050 miliseconds to send invitation. What to do now !!!. On **thinking techie decided to take approach of async way, secretly our one of team member taught this to techie. Let us see what has been taught to techie secretly. . [confidential notes started !!] . Asynchronous program behave differently, it will take one execution step a time. Asynchronous routines are able to “pause” while waiting on their ultimate result and let other routines run in the meantime. . This means that the program will move on to future execution steps even though a previous step hasn’t yet finished and is still running elsewhere. This also means that the program knows what to do when a previous step does finish running. . Asynchronous programming techniques allow programs to take advantage of relatively slow IO processes by freeing the CPU to do other work. . homework techiniques for techie : polling interval, threading way, context-switching, blocking code &amp; non-blocking code. . [confidential notes ended !!] . we need to first look at techie sync code for bot invitation. . import queue import random import time # create random status behaviour for bots def random_status(bot_info): status = [&#39;online&#39;,&#39;offline&#39;,&#39;busy&#39;] for info in bot_info: info[&#39;status&#39;] = random.choice(status) return bot_info # create random respone delay behaviour for bots def random_response(info): delay = 5 response = random.choice([&#39;accept&#39;,&#39;reject&#39; &#39;on sick leave&#39;]) if info[&#39;status&#39;] == &#39;busy&#39;: delay += random.randint(1,5) time.sleep(delay) return response, delay def imp_message(imp_queue): if imp_queue.empty(): print(&quot;No special attention needed.&quot;) else: while not imp_queue.empty(): info = imp_queue.get() print(&quot;Hi {0},Get well soon !!&quot;.format(info[&#39;name&#39;])) def invite(invite_queue, imp_queue): total_time = 0 if invite_queue.empty(): print(&quot;No new invitation to make.&quot;) else: while not invite_queue.empty(): info = invite_queue.get() print(info) respone, delay = random_response(info) if respone == &#39;on sick leave&#39;: imp_queue.put(info) total_time += delay print(&quot;time taken to get response: {0} millisecond&quot;.format(delay)) print(&quot;time taken in {0} millisecond to complete invitaiton&quot;.format(total_time)) def main(): bot_info = [ {&quot;name&quot;: &quot;Smart Bot&quot;}, {&quot;name&quot;: &quot;Volter Bot&quot;}, {&quot;name&quot;: &quot;Fintech Bot&quot;}, {&quot;name&quot;: &quot;Pepper Bot&quot;}, {&quot;name&quot;: &quot;CloudBot&quot;} ] bot_info = random_status(bot_info) invite_queue = queue.Queue() imp_queue = queue.Queue() imp_queue.put({&quot;name&quot;:&quot;Pretbot&quot;}) for info in bot_info: invite_queue.put(info) # sync task for invitation and special message. invite(invite_queue,imp_queue) imp_message(imp_queue) if __name__ == &quot;__main__&quot;: main() .",
            "url": "https://www.sysarch.in//markdown/2022/02/21/asynchronous-basics.html",
            "relUrl": "/markdown/2022/02/21/asynchronous-basics.html",
            "date": " • Feb 21, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Scalibility Basics",
            "content": "Scalibility Basics . Clone . First Golden Rule of Scalibility . Every server contains exactly SAME CODEBASE and DON NOT STORE any user-related data, like session or profile picture, on local disk or memory. . where to store userdata? . userdata needs to be stored in a centralized data store which is accessible to all your app server. . . Database . We can server multiple concurrent request using horizontal scaling Multiple request will lead to lots of read/write request to database which eventually lead to slowness of app. . How to solve data read/write issue? . Path 1 . Do Master Slave Replication (Read from slave, write to master) Upgrade master server by adding more RAM. Sharding | Denormalization | Sql Tunning | . | Path 2 . Switch to NOSql, now joins will need to be done in your app. Sooner your db request will again be slower &amp; slower. you will need to introduce Cache . | . Cache . when to use cache : user have to suffer slow page request when a lot of data is fetched from database. With “Cache” means IN-MEMORY like memcached or redis. . There are two patterns of caching data Cached Database Queries | Cached Object Idea of objects to cache - User Session - Fully Rendered Blog Articles - Activity Streams - User &lt;-&gt; Friend Relationships | Asynchronism . Please wait a while situations . Async #1 . The First way of aysc processing is the pre build the content and serve when request arrive. . This paradigm used to serve dynamic content page of a website are prebuid and locally stored as static website on every change often these computing are done on a regular basis, maybe a scirpt which is called every hour by a cronjob. the static website are stored in cloud object storage. . Async #2 . The Second way of async processing is the system request the heavy computing task, put it in job queue and free the system to do other task and let notify system when it&#39;s done. . User come &amp; start a very heavy computing task such as order product online, so frontend website sends a job onto a job queue &amp; immediately signals back to the user. the job queue is constantly checked by a bunck of workers for new job, the worker do work and signal work done to frontend. . . We have come to end of blog, Please let us know for any suggestions and queries in comment box. . Stay tunned . Amazing Work Comming Soon .",
            "url": "https://www.sysarch.in//markdown/2022/02/13/scalibility-basics.html",
            "relUrl": "/markdown/2022/02/13/scalibility-basics.html",
            "date": " • Feb 13, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://www.sysarch.in//jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": ". Priyanshu Krishnan . Evolving System Architect | Software Developer . &nbsp; . Site Reliability Engineer in IBM CLOUD under Infrastructure-as-a-service org. My day-to-day job include working of highly integrated systems and developing software architect to make system reliable. . .",
          "url": "https://www.sysarch.in//about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://www.sysarch.in//robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}