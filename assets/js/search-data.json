{
  
    
        "post0": {
            "title": "🌲 Binary Tree",
            "content": "Build Binary Tree . import warnings warnings.filterwarnings(&#39;ignore&#39;) . ! pip install binarytree ! pip install setuptools==61.2.0 . from binarytree import build nodes = [3,5,6,1,2,3,None,2,4,None,1,None,9] nodes_1 = [50,25,75,12,37,62,87,None,None,30,None,None,70,None,None] binary_tree = build(nodes_1) print(binary_tree) . _______50______ / _25___ ____75 / / 12 _37 62 87 / 30 70 . print(binary_tree.value) . 50 . print(binary_tree.right) . ____75 / 62 87 70 . print(binary_tree.left) . _25___ / 12 _37 / 30 . Common Operation . Size of Binary Tree . def size_bt(root): if root == None: return 0 ls = size_bt(root.left) rs = size_bt(root.right) ts = ls + rs + 1 return ts size_bt(binary_tree) . 9 . Sum of Binary Tree . def sum_bt(root): if root == None: return 0 lsum = sum_bt(root.left) rsum = sum_bt(root.right) total_sum = root.value + lsum + rsum return total_sum sum_bt(binary_tree) . 448 . Max in Binary Tree . def max_bt(root): if root == None: return 0 lmax = max_bt(root.left) rmax = max_bt(root.right) total_max = max(root.value,max(lmax, rmax)) return total_max max_bt(binary_tree) . 87 . Height of Binary Tree . def height_bt(root): if root == None: return 0 lheight = height_bt(root.left) rheight = height_bt(root.right) total_height = max(lheight, rheight) + 1 return total_height height_bt(binary_tree) . 4 . Order . def preorder(root): if root == None: return print(root.value,end=&quot; &quot;) preorder(root.left) preorder(root.right) def inorder(root): if root == None: return inorder(root.left) print(root.value,end=&quot; &quot;) inorder(root.right) def postorder(root): if root == None: return postorder(root.left) postorder(root.right) print(root.value,end=&quot; &quot;) def levelorder(root): queue = [] queue.append(root) while queue: count = len(queue) for i in range(count): node = queue.pop(0) # remove 0th element of list print(node.value,end=&quot; &quot;) if node.left != None: queue.append(node.left) if node.right != None: queue.append(node.right) print() def order(root,select): if select == 1: print(&#39;preorder&#39;) preorder(root) elif select == 2: print(&#39;inorder&#39;) inorder(root) elif select == 3: print(&#39;postorder&#39;) postorder(root) else: print(&#39;levelorder&#39;) levelorder(root) . preorder . order(binary_tree,1) . preorder 50 25 12 37 30 75 62 70 87 . inorder . order(binary_tree,2) . inorder 12 25 30 37 50 62 70 75 87 . postorder . order(binary_tree,3) . postorder 12 30 37 25 70 62 87 75 50 . levelorder . order(binary_tree,4) . levelorder 50 25 75 12 37 62 87 30 70 . Path to root . path = [] def pathtonode(root, data): if root == None: return False if root.value == data: path.append(root) return True ln = pathtonode(root.left,data) if ln: path.append(root) return True rn = pathtonode(root.right,data) if rn: path.append(root) return True return False pathtonode(binary_tree,70) print(path) . [Node(70), Node(62), Node(75), Node(50)] . Node K Level down . def nodeklevel(root,k): if root == None or k &lt; 0: return if k == 0: print(root.value,end=&quot; &quot;) nodeklevel(root.left,k-1) nodeklevel(root.right,k-1) nodeklevel(binary_tree,2) . 12 37 62 87 . Node K Level Far . def nodeklevelblock(root,k,blocker): if root == None or k &lt; 0 or blocker == root: return if k == 0: print(root.value,end=&quot; &quot;) nodeklevelblock(root.left,k-1,blocker) nodeklevelblock(root.right,k-1,blocker) def nodeklevelfar(root,k,data): global path pathtonode(root,data) for idx,p in enumerate(path): if idx == 0: nodeklevelblock(p,k-idx,None) else: nodeklevelblock(p,k-idx,path[idx-1]) path=[] nodeklevelfar(binary_tree,2,25) . 30 75 . Path to leaf node . def pathleaf(root,path): if root == None: return if not root.left and not root.right: print(path,str(root.value)) return pathleaf(root.left,path+&quot; &quot;+str(root.value)) pathleaf(root.right,path+&quot; &quot;+str(root.value)) pathleaf(binary_tree,&quot;&quot;) . 50 25 12 50 25 37 30 50 75 62 70 50 75 87 .",
            "url": "https://blog.sysarch.in/algorithms/tree/2022/04/05/Binary-Tree.html",
            "relUrl": "/algorithms/tree/2022/04/05/Binary-Tree.html",
            "date": " • Apr 5, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Amazon last mile challenge",
            "content": "problem 1 . Load balance the job on n number of processor where k is number of processor to be executed on these processor . from heapq import heapify, heappush, heappop def loadbalance(job,k): heapify(job) while k &gt; 0: loc_min = heappop(job) heappush(job,loc_min+1) k -= 1 print(job) loadbalance([2,4,3],100) . problem 2 . def party(guest,total_candle,time_burn,atleast_candle): temp = 0 while len(guest) &gt; 0: t = guest.pop(0) if t &lt; temp: print(t,guest,total_candle) continue else: temp = t + time_burn total_candle -= atleast_candle if total_candle &lt; 0: print(&quot;not possible&quot;) return print(t,guest,total_candle) guest = [5, 7, 9, 10, 12,18,30,50,56,78,85,87,89] total_candle = 15 time_burn = 5 atleast_candle = 2 party(guest,total_candle,time_burn,atleast_candle) .",
            "url": "https://blog.sysarch.in/markdown/2022/04/03/amzaon-last-mile.html",
            "relUrl": "/markdown/2022/04/03/amzaon-last-mile.html",
            "date": " • Apr 3, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "💪 Mighty Graph",
            "content": "Build Graph . from collections import defaultdict class Graph: def __init__(self,vertices): self.vertices = vertices self.graph = defaultdict(list) def add_edge(self,src,dest,weight): self.graph[src].append([src,dest,weight]) self.graph[dest].append([dest,src,weight]) def build_graph(vertices,edges): g = Graph(vertices) for i in edges: g.add_edge(i[0],i[1],i[2]) return g.graph # Building Graph with 7 Vertices and * Edges vertices = 7 edges = [ [0,1,10], [1,2,20], [2,3,30], [0,3,40], [3,4,50], [4,5,60], [5,6,70], [4,6,80] ] graph = build_graph(vertices,edges) graph . defaultdict(list, {0: [[0, 1, 10], [0, 3, 40]], 1: [[1, 0, 10], [1, 2, 20]], 2: [[2, 1, 20], [2, 3, 30]], 3: [[3, 2, 30], [3, 0, 40], [3, 4, 50]], 4: [[4, 3, 50], [4, 5, 60], [4, 6, 80]], 5: [[5, 4, 60], [5, 6, 70]], 6: [[6, 5, 70], [6, 4, 80]]}) . Has Path . def haspath(graph,src,dest,visited): if src == dest: return True visited[src] = True for conn in graph[src]: nbr = conn[1] if not visited[nbr]: len(area[0]) return False src = 0 dest = 6 visited = [False] * vertices haspath(graph,src,dest,visited) . False . All Path . def allpath(graph,src,dest,visited,psf): if src == dest: print(psf) return visited[src] = True for path in graph[src]: nbr = path[1] if not visited[nbr]: allpath(graph,nbr,dest,visited,psf+&quot; &quot;+str(nbr)) visited[src] = False src = 0 dest = 6 visited = [False] * vertices allpath(graph,src,dest,visited,&quot;0&quot;) . 0 1 2 3 4 5 6 0 1 2 3 4 6 0 3 4 5 6 0 3 4 6 . Weight Solver . def weightsolver(graph,src,dest,visited,psf,wsf): if src == dest: print(psf,&quot; @ &quot;,str(wsf)) return visited[src] = True for path in graph[src]: nbr = path[1] wgt = path[2] if not visited[nbr]: weightsolver(graph,nbr,dest,visited,psf+&quot; &quot;+str(nbr),wsf+wgt) visited[src] = False src = 0 dest = 6 visited = [False] * vertices weightsolver(graph,src,dest,visited,&quot;0&quot;,0) . 0 1 2 3 4 5 6 @ 240 0 1 2 3 4 6 @ 190 0 3 4 5 6 @ 220 0 3 4 6 @ 170 . Multisolver . import math solvebox = { &quot;smallest&quot;: [&quot;&quot;,math.inf], &quot;longest&quot;: [&quot;&quot;,-math.inf], &quot;floor&quot;: [&quot;&quot;,-math.inf], &quot;ceil&quot;: [&quot;&quot;,math.inf], } criteria = 200 def multisolver(graph,src,dest,visited,psf,wsf): if src == dest: if wsf &lt; solvebox[&quot;smallest&quot;][1]: solvebox[&quot;smallest&quot;] = [psf,wsf] if wsf &gt; solvebox[&quot;longest&quot;][1]: solvebox[&quot;longest&quot;] = [psf,wsf] if wsf &lt; criteria and wsf &gt; solvebox[&quot;floor&quot;][1]: solvebox[&quot;floor&quot;] = [psf,wsf] if wsf &gt; criteria and wsf &lt; solvebox[&quot;ceil&quot;][1]: solvebox[&quot;ceil&quot;] = [psf,wsf] return visited[src] = True for path in graph[src]: nbr = path[1] wgt = path[2] if not visited[nbr]: multisolver(graph,nbr,dest,visited,psf+&quot; &quot;+str(nbr),wsf+wgt) visited[src] = False multisolver(graph,src,dest,visited,&quot;0&quot;,0) solvebox . {&#39;smallest&#39;: [&#39;0 3 4 6&#39;, 170], &#39;longest&#39;: [&#39;0 1 2 3 4 5 6&#39;, 240], &#39;floor&#39;: [&#39;0 1 2 3 4 6&#39;, 190], &#39;ceil&#39;: [&#39;0 3 4 5 6&#39;, 220]} . Connected Components . def gen_comp(graph,src,comp,visited): visited[src] = True comp.append(src) for path in graph[src]: nbr = path[1] if not visited[nbr]: gen_comp(graph,nbr,comp,visited) def traverse_vert(vertices,graph): comps = [] visited = [False]*vertices for vert in range(vertices): if not visited[vert]: conn_comp = [] gen_comp(graph,vert,conn_comp,visited) comps.append(conn_comp) return comps v = 7 input = [ [0,1,10], [2,3,10], [4,5,10], [5,6,10], [4,6,10], ] comp_graph = build_graph(v,input) traverse_vert(vertices,comp_graph) . [[0, 1], [2, 3], [4, 5, 6]] . Count Number of Islands . def isconn(area,x,y,visited): if(x&lt;0 or x &gt; len(area)-1 or y &lt;0 or y &gt; len(area[0])-1 or visited[x][y] or area[x][y] == 1): return visited[x][y] = True isconn(area,x-1,y,visited) isconn(area,x+1,y,visited) isconn(area,x,y-1,visited) isconn(area,x,y+1,visited) def island(area): count = 0 height = len(area) width = len(area[0]) visited = [[False] * width] * height for x in range(height): for y in range(width): if area[x][y] == 0 and not visited[x][y]: isconn(area,x,y,visited) count += 1 return count area = [ [0,0,1,1,1,1,1,1], [0,0,1,1,1,1,1,1], [1,1,1,1,1,1,1,0], [1,1,0,0,0,1,1,0], [1,1,1,1,0,1,1,0], [1,1,1,1,0,1,1,0], [1,1,1,1,0,1,1,0], [1,1,1,1,1,1,1,0], [1,1,1,1,1,1,1,0], ] island(area) . 3 . Perfect Friends . from collections import defaultdict class Graph: def __init__(self,vertices): self.vertices = vertices self.graph = defaultdict(list) def add_edge(self,src,dest): self.graph[src].append([src,dest]) self.graph[dest].append([dest,src]) def build_graph(vertices,edges): g = Graph(vertices) for i in edges: g.add_edge(i[0],i[1]) return g.graph persons = 7 pairs = [ [0,1], [2,3], [4,5], [5,6], [4,6], ] perfect_graph = build_graph(persons,pairs) # find connected components to find number of clubs clubs = traverse_vert(persons,perfect_graph) no_of_clubs = len(clubs) perfect_pair = 0 for i in range(no_of_clubs): for j in range(i+1,no_of_clubs): perfect_pair += len(clubs[i]) * len(clubs[j]) perfect_pair . 16 . Hamilton Path (+) or Cycle (*) . from collections import defaultdict class Graph: def __init__(self,vertices): self.vertices = vertices self.graph = defaultdict(list) def add_edge(self,src,dest): self.graph[src].append([src,dest]) self.graph[dest].append([dest,src]) def build_graph(vertices,edges): g = Graph(vertices) for i in edges: g.add_edge(i[0],i[1]) return g.graph vertices = 7 hamilton_in = [ [0,1], [0,3], [1,2], [2,3], [2,5], [5,6], [5,4], [6,4], [4,3], ] hamilton_graph = build_graph(vertices,hamilton_in) def hamilton(graph,src,dest,visited,psf,osrc): visited[src] = True if all(visited): for path in graph[src]: nbr = path[1] if nbr == osrc: print(psf,&quot; &quot;,&quot;*&quot;) return print(psf,&quot; &quot;,&quot;+&quot;) for path in graph[src]: nbr = path[1] if not visited[nbr]: hamilton(graph,nbr,dest,visited,psf+&quot; &quot;+str(nbr),osrc) visited[src] = False visited = [False] * vertices hamilton(hamilton_graph,0,6,visited,&quot;0&quot;,0) . 0 1 2 3 4 5 6 + 0 1 2 3 4 6 5 + 0 1 2 5 6 4 3 * 0 1 2 5 4 6 + . Breadth First Traversal . sample_graph = { &#39;P&#39; : [&#39;S&#39;,&#39;R&#39;,&#39;Q&#39;], &#39;Q&#39; : [&#39;P&#39;,&#39;R&#39;], &#39;R&#39; : [&#39;P&#39;,&#39;Q&#39;,&#39;T&#39;], &#39;S&#39; : [&#39;P&#39;], &#39;T&#39; : [&#39;R&#39;] } def bfs(graph,visited,queue,src): visited.append(src) queue.append(src) while queue: node = queue.pop(0) print(node,end=&quot; &quot;) for nbr in graph[node]: if nbr not in visited: queue.append(nbr) visited.append(nbr) visited = [] queue = [] src = &#39;P&#39; bfs(sample_graph,visited,queue,src) . P S R Q T . Has Cyclic . sample_graph = { &#39;P&#39; : [&#39;S&#39;,&#39;R&#39;,&#39;Q&#39;], &#39;Q&#39; : [&#39;P&#39;,&#39;R&#39;], &#39;R&#39; : [&#39;P&#39;,&#39;Q&#39;,&#39;T&#39;], &#39;S&#39; : [&#39;P&#39;], &#39;T&#39; : [&#39;R&#39;] } def hascycle(graph,visited,queue,src): visited.append(src) queue.append(src) while queue: node = queue.pop(0) for nbr in graph[node]: if nbr not in visited: queue.append(nbr) visited.append(nbr) # if neighbour is visited, then it&#39;s forming a cycle. else: return True return False visited = [] queue = [] src = &#39;P&#39; hascycle(sample_graph,visited,queue,src) # this work for connected graph, to make it work for non-connected graph, we need loop for every vertiex as src for hascycle funtion. . True . Spread Of Infection . infection_graph = { &#39;P&#39; : [&#39;S&#39;,&#39;R&#39;,&#39;Q&#39;], &#39;Q&#39; : [&#39;P&#39;,&#39;R&#39;], &#39;R&#39; : [&#39;P&#39;,&#39;Q&#39;,&#39;T&#39;], &#39;S&#39; : [&#39;P&#39;], &#39;T&#39; : [&#39;R&#39;] } def spread_of_infection(graph,visited,queue,src,time): visited.append(src) queue.append([src,0]) count=0 while queue: node = queue.pop(0) if node[1] &gt; time: print(count) return count+=1 for nbr in graph[node[0]]: if nbr not in visited: queue.append([nbr,node[1]+1]) visited.append(nbr) visited = [] queue = [] src = &#39;T&#39; time = 2 spread_of_infection(infection_graph,visited,queue,src,time) . 4 . Dijkstra Algorithm . import heapq dijk_graph = { 0:[[0,1,10],[0,3,40]], 1:[[1,0,10],[1,2,10]], 2:[[2,1,10],[2,3,10]], 3:[[3,0,40],[3,4,2]], 4:[[4,3,2],[4,5,3],[4,6,8]], 5:[[5,4,3],[5,6,3]], 6:[[6,4,8],[6,5,3]] } def dijk_algo(graph,src): pq = [] visited = [False] * len(graph) heapq.heappush(pq,(0,src,&quot;&quot;)) while pq: rem = heapq.heappop(pq) if not visited[rem[1]]: visited[rem[1]] = True print(f&#39;{str(rem[1])} via {rem[2]} @ {str(rem[0])}&#39;) for edge in graph[rem[1]]: if not visited[edge[1]]: heapq.heappush(pq,(rem[0]+edge[2],edge[1],rem[2]+str(edge[0]))) dijk_algo(dijk_graph,0) . 0 via @ 0 1 via 0 @ 10 2 via 01 @ 20 3 via 012 @ 30 4 via 0123 @ 32 5 via 01234 @ 35 6 via 012345 @ 38 . Prims Algorithm . import heapq prims_graph = { 0:[[10,0,1],[40,0,3]], 1:[[10,1,0],[10,1,2]], 2:[[10,2,1],[10,2,3]], 3:[[40,3,0],[2,3,4]], 4:[[2,4,3],[3,4,5],[8,4,6]], 5:[[3,5,4],[3,5,6]], 6:[[8,6,4],[3,6,5]] } def prims_algo(graph,src): pq = [] visited = [False] * len(graph) heapq.heappush(pq,(0,src,-1)) while pq: rem = heapq.heappop(pq) if not visited[rem[1]]: visited[rem[1]] = True print(f&#39;{str(rem[2])}-{str(rem[1])}@{str(rem[0])}&#39;) for edge in graph[rem[1]]: if not visited[edge[2]]: heapq.heappush(pq,(rem[0]+edge[0],edge[2],rem[1])) prims_algo(prims_graph,0) . -1-0@0 0-1@10 1-2@20 2-3@30 3-4@32 4-5@35 5-6@38 . Topological Sort . topo_graph = { 0:[[0,1],[0,3]], 1:[[1,2]], 2:[[2,3]], 3:[], 4:[[4,3],[4,5],[4,6]], 5:[[5,6]], 6:[], } def helper(graph,src,visited,stack): visited[src] = True for edge in graph[src]: if not visited[edge[1]]: helper(graph,edge[1],visited,stack) stack.insert(0,src) def topo_sort(graph): stack = [] visited = [False] * len(graph) for i in range(len(graph)): if not visited[i]: helper(graph,i,visited,stack) return stack topo_sort(topo_graph) . [4, 5, 6, 0, 1, 2, 3] . Iterative Depth First Search . sample_graph = { &#39;P&#39; : [&#39;S&#39;,&#39;R&#39;,&#39;Q&#39;], &#39;Q&#39; : [&#39;P&#39;,&#39;R&#39;], &#39;R&#39; : [&#39;P&#39;,&#39;Q&#39;,&#39;T&#39;], &#39;S&#39; : [&#39;P&#39;], &#39;T&#39; : [&#39;R&#39;] } def dfs(graph,visited,stack,src): stack.insert(0,(src,src)) while stack: node = stack.pop(0) if node[0] not in visited: visited.append(node[0]) print(node[0],&#39;@&#39;,node[1]) for nbr in graph[node[0]]: if nbr not in visited: stack.insert(0,(nbr,node[1]+nbr)) visited = [] stack = [] src = &#39;S&#39; dfs(sample_graph,visited,stack,src) . S @ S P @ SP Q @ SPQ R @ SPQR T @ SPQRT .",
            "url": "https://blog.sysarch.in/algorithms/graph/2022/03/24/Mighty-Graph.html",
            "relUrl": "/algorithms/graph/2022/03/24/Mighty-Graph.html",
            "date": " • Mar 24, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "🪐 Welcome to World Of Programming Inceptions",
            "content": "Recursion Thinking Pattern . High Level Thinking . Set Expectation. | Built Faith. | Link Expectation &amp; Faith together. | . Low Level Thinking . Do Dry Run. | Trace Stack for base case. | . Print Decreasing Order . def pdo(n): if n == 0: return # Please Stop, Now you may go into hell [RecursionError: maximum recursion depth exceeded] print(n, end=&quot; | &quot;) pdo(n-1) pdo(5) . 5 | 4 | 3 | 2 | 1 | . Print Increasing Order . def pio(n): if n == 0: return pio(n-1) print(n,end=&quot; | &quot;) pio(5) . 1 | 2 | 3 | 4 | 5 | . Print Decreasing &amp; Increasing Order . def pdio(n): if n == 0: return print(n,end=&quot; | &quot;) pdio(n-1) print(n,end=&quot; | &quot;) pdio(5) . 5 | 4 | 3 | 2 | 1 | 1 | 2 | 3 | 4 | 5 | . Factorial . def fact(n): if n == 1: return 1 return n*fact(n-1) fact(5) . 120 . Power (Linear) . def power(x,n): if n == 0: return 1 return x*power(x,n-1) power(2,3) . 8 . Power (Log) . def powlog(x,n): if n == 0: return 1 loc_pow = powlog(x, int(n/2)) loc_pow *= loc_pow if n%2 != 0: loc_pow = loc_pow * x return loc_pow powlog(2,3) . 8 . Zig Zag Recursion . def zigzag(n): if n == 0: return print(&quot;zig &quot;,n) zigzag(n-1) print(&quot;dot &quot;,n) zigzag(n-1) print(&quot;zag &quot;,n) zigzag(2) . zig 2 zig 1 dot 1 zag 1 dot 2 zig 1 dot 1 zag 1 zag 2 . Tower of hanoi . def toh(n,t1,t2,t3): if n == 0: return toh(n-1,t1,t3,t2) print(n, &quot;[ &quot;,t1,&quot;-&gt;&quot;,t2,&quot; ]&quot;,end =&quot; : &quot;) toh(n-1,t3,t2,t1) toh(3,&quot;A&quot;,&quot;B&quot;,&quot;C&quot;) . 1 [ A -&gt; B ] : 2 [ A -&gt; C ] : 1 [ B -&gt; C ] : 3 [ A -&gt; B ] : 1 [ C -&gt; A ] : 2 [ C -&gt; B ] : 1 [ A -&gt; B ] : . Display Array . def disarr(arr,idx): if idx == len(arr): return print(arr[idx], end=&quot; | &quot;) disarr(arr,idx+1) disarr([1,2,3,4,5],0) . 1 | 2 | 3 | 4 | 5 | . Display reverse array . def disrev(arr,idx): n = len(arr) if idx == n: return print(arr[n-idx-1], end=&quot; | &quot;) disrev(arr,idx+1) disrev([1,2,3,4,5],0) . 5 | 4 | 3 | 2 | 1 | . Maximum in array . def maxi(arr,idx): n = len(arr) if idx == n: print(arr[idx-1]) return elif arr[idx] &gt; arr[n-1]: arr[n-1],arr[idx] = arr[idx], arr[n-1] print(idx,&quot;:&quot;,arr) maxi(arr,idx+1) def maxipro(arr,idx): if idx == len(arr): return 0 loc_mx = maxipro(arr,idx+1) if loc_mx &gt; arr[idx]: return loc_mx else: return arr[idx] maxipro([9,40,23,86,12],0) . 86 . First occurencenc in array . def foia(arr,idx,ele): if idx == len(arr): return -1 loc_idx = foia(arr,idx+1,ele) if arr[idx] == ele: return idx else: return loc_idx foia([4,6,2,7,3,7,2,3],0,7) . 3 . Last Occurencenc in array . def loia(arr,idx,ele): if idx == len(arr): return -1 loc_idx = loia(arr,idx+1,ele) if loc_idx == -1: if arr[idx] == ele: return idx else: return -1 else: return loc_idx loia([4,6,2,7,4,3,7,2,3],0,3) . 8 . All Index of element in array . def aiea(arr,idx,ele,fsf): if idx == len(arr): return [0 for i in range(fsf)] lst = [] if arr[idx] == ele: lst = aiea(arr,idx+1,ele,fsf+1) lst[fsf] = idx return lst else: lst = aiea(arr,idx+1,ele,fsf) return lst print(aiea([4,6,2,7,4,3,7,2,3],0,3,0)) . [5, 8] . Get Subsequence . def getsub(word): if word == &quot;&quot;: return [&quot;&quot;] ch = word[0] ls = getsub(word[1:]) lt = [] for i in ls: lt.append(&quot;&quot;+i) lt.append(ch+i) return lt getsub(&quot;abc&quot;) # Low Memory Usage Method def getsublow(word,ans): if word == &quot;&quot;: print(ans, end=&quot; | &quot;) return ch = word[0] wd = word[1:] getsublow(wd, ans + &quot;&quot;) getsublow(wd, ans + ch) getsublow(&quot;abc&quot;,&quot;&quot;) . | c | b | bc | a | ac | ab | abc | . Keypad Combination . keypad = [&quot;,!&quot;,&quot;abc&quot;,&quot;def&quot;,&quot;ghi&quot;,&quot;jkl&quot;,&quot;mno&quot;,&quot;pqrs&quot;,&quot;tu&quot;,&quot;vwx&quot;,&quot;yz&quot;] # Heavy In-Memory Usage Method def keycomb(press): if press == &quot;&quot;: return [&quot;&quot;] ch = press[0] ls = keycomb(press[1:]) lt = [] word = keypad[int(ch)] for w in word: for l in ls: lt.append(w + l) return lt keycomb(&quot;157&quot;) # Low In-Memory Usage Method def keycomp2(press,ans): if press == &quot;&quot;: print(ans, end=&quot; | &quot;) return ch = press[0] keys = keypad[int(ch)] for k in keys: keycomp2(press[1:],ans + k) keycomp2(&quot;157&quot;,&quot;&quot;) . amt | amu | ant | anu | aot | aou | bmt | bmu | bnt | bnu | bot | bou | cmt | cmu | cnt | cnu | cot | cou | . Get Stairs Path . def gsp(n): if n == 0: return [&quot;&quot;] elif n &lt; 0: return [] p1 = gsp(n-1) p2 = gsp(n-2) p3 = gsp(n-3) ls = [] for i in p1: ls.append(&quot;1&quot;+i) for j in p2: ls.append(&quot;2&quot;+j) for k in p3: ls.append(&quot;3&quot;+k) return ls gsp(3) # Low In-Memory Usage Method def gsp2(n,ans): if n == 0: print(ans, end=&quot; | &quot;) return elif n &lt; 0: return for i in range(1,4): gsp2(n-i,ans + str(i)) gsp2(3,&quot;&quot;) . 111 | 12 | 21 | 3 | . Get Maze Path . def gmp(sr,sc,dr,dc): if sr == dr and sc == dc: return [&quot;&quot;] hp = [] vp = [] if sc &lt; dc: hp = gmp(sr,sc+1,dr,dc) if sr &lt; dr: vp = gmp(sr+1,sc,dr,dc) ls = [] for h in hp: ls.append(&#39;h&#39;+ h) for v in vp: ls.append(&#39;v&#39;+ v) return ls gmp(1,1,3,3) # Low In-Memory Usage Method def gmp2(sr,sc,dr,dc,ans): if sc &gt; dc or sr &gt; dr: return if sr == dr and sc == dc: print(ans, end=&quot; | &quot;) return gmp2(sr,sc+1,dr,dc,ans + &#39;h&#39;) gmp2(sr+1,sc,dr,dc,ans + &#39;v&#39;) gmp2(1,1,3,3,&quot;&quot;) . hhvv | hvhv | hvvh | vhhv | vhvh | vvhh | . Get Maze Path with jumps . def gmpj(sr,sc,dr,dc): if sr == dr and sc == dc: return [&quot;&quot;] ls = [] for i in range(1,(dc-sc)+1): hpaths = gmpj(sr,sc+i,dr,dc) for hp in hpaths: ls.append(&#39;h&#39;+str(i)+hp) # horizontal for k in range(1,(dr-sr)+1): vpaths = gmpj(sr+k,sc,dr,dc) for vp in vpaths: ls.append(&#39;v&#39;+str(k)+vp) # vertical return ls gmpj(1,1,3,3) # Low In-Memory Usage Method def gmpj2(sr,sc,dr,dc,ans): if sr &gt; dr or sc &gt; dc: return if sr == dr and sc == dc: print(ans, end=&quot; | &quot;) return hmove = dc - sc vmove = dr - sc d = 1 for h in range(1,hmove + 1): gmpj2(sr,sc+1,dr,dc,ans+&#39;h&#39;+str(h)) for v in range(1,vmove +1): gmpj2(sr+1,sc,dr,dc,ans+&#39;v&#39;+str(v)) while(d &lt;= hmove and d &lt;= vmove): gmpj2(sr+1,sc+1,dr,dc,ans+&#39;d&#39;+str(d)) d +=1 gmpj2(1,1,3,3,&quot;&quot;) . h1v1v1h1 | h1v1d1 | h2v1v1h1 | h2v1d1 | v1h1v1h1 | v1h1d1 | v1h2v1h1 | v1h2d1 | v1v1h1h1 | v1v1h2h1 | v1v2h1h1 | v1v2h2h1 | v1d1h1 | v1d2h1 | v2h1v1h1 | v2h1d1 | v2h2v1h1 | v2h2d1 | v2v1h1h1 | v2v1h2h1 | v2v2h1h1 | v2v2h2h1 | v2d1h1 | v2d2h1 | d1v1h1 | d1d1 | d2v1h1 | d2d1 | . Permutation Of String . def pos(string,ans): if len(string) == 0: print(ans,end=&quot; | &quot;) return for i in range(len(string)): chr = string[i] rem_string = string[:i] + string[i+1:] pos(rem_string,ans+chr) pos(&quot;abc&quot;,&quot;&quot;) . abc | acb | bac | bca | cab | cba | . Flood Fill . def floodfill(maze,visited,r,c,ans): if r &lt; 0 or c &lt; 0 or r == len(maze) or c == len(maze[0]) or maze[r][c] == 1 or visited[r][c] == 1: return if r == len(maze) - 1 and c == len(maze[0]) - 1: print(ans) return visited[r][c] = 1 floodfill(maze,visited,r-1,c ,ans+&quot;t&quot;) floodfill(maze,visited,r+1,c ,ans+&quot;d&quot;) floodfill(maze,visited,r, c-1,ans+&quot;l&quot;) floodfill(maze,visited,r ,c+1,ans+&quot;t&quot;) visited[r][c]=0 visited = [[0,0,0], [0,0,0], [0,0,0], [0,0,0]] maze = [[0,1,1], [0,0,1], [1,0,0], [0,0,0]] floodfill(maze,visited,0,0,&quot;&quot;) . dtddt dtdtd . Target Sum Subset . def tss(arr,idx,sos,tar,ans): if idx == len(arr): if sos == tar: print(ans) return tss(arr,idx+1,sos+arr[idx],tar,ans+&quot; &quot;+str(arr[idx])) tss(arr,idx+1,sos,tar,ans) tss([4,6,1,6,2,3],0,0,12,&quot;&quot;) . 4 6 2 4 6 2 6 1 2 3 6 6 1 6 2 3 . N-Queeen Problem . def saveplace(board,row,col): for r in range(row-1,-1,-1): if board[r][col]==1: return False for a,b in zip(range(row-1,-1,-1),range(col-1,-1,-1)): if board[a][b]==1: return False for c,d in zip(range(row-1,-1,-1),range(col+1,len(board[0])-1,1)): if board[c][d]==1: return False return True def nqp(board,row,ans): if len(board) == row: print(ans) return for col in range(len(board[0])): if saveplace(board,row,col): board[row][col] = 1 nqp(board,row+1,ans+&quot; &quot;+str(row)+&quot;-&quot;+str(col)) board[row][col] = 0 n = 4 board = [[0 for i in range(n)] for j in range(n)] nqp(board,0,&quot;&quot;) . 0-1 1-3 2-0 3-2 0-1 1-3 2-2 3-0 0-2 1-0 2-3 3-1 . Knight Tour . def KnightTour(board,row,col,move): if row &lt; 0 or col &lt; 0 or row &gt;= len(board) or col &gt;= len(board) or board[row][col] &gt; 0: return elif move == len(board) * len(board): board[row][col] = move board[row][col] = 0 return board[row][col] = move KnightTour(board,row-2,col+1,move+1) KnightTour(board,row-1,col+2,move+1) KnightTour(board,row+1,col+2,move+1) KnightTour(board,row+2,col+1,move+1) KnightTour(board,row+2,col-1,move+1) KnightTour(board,row+1,col-2,move+1) KnightTour(board,row-1,col-2,move+1) KnightTour(board,row-2,col-1,move+1) board[row][col] = 0 n = 5 row = 2 col = 3 board = [[0 for i in range(n)] for j in range(n)] KnightTour(board,row,col,0) .",
            "url": "https://blog.sysarch.in/algorithms/recursion/2022/03/17/Recursion_&_Backtracking.html",
            "relUrl": "/algorithms/recursion/2022/03/17/Recursion_&_Backtracking.html",
            "date": " • Mar 17, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "Dynamic Programming Snippets",
            "content": "Rod Cutting . import math def get_max_price(rod_price_list): total_length = len(rod_price_list) max_obtain_at_length = [0 for x in range(total_length+1)] max_obtain_at_length[0] = 0 for curr_len in range(1,total_length+1): print(&quot;curr_len&quot;,&quot;:&quot;,curr_len) max_at_curr_len=-math.inf for iter_len in range(curr_len): print(&quot; &quot;,&quot;iter_len :&quot;,iter_len) print(&quot; &quot;,&quot;rod_price_list[&quot;,iter_len,&quot;]=&quot;,rod_price_list[iter_len]) print(&quot; &quot;,&quot;max_obtain_at_length[&quot;,(curr_len-iter_len-1),&quot;]=&quot;,max_obtain_at_length[curr_len-iter_len-1]) max_at_curr_len = max(max_at_curr_len,rod_price_list[iter_len]+max_obtain_at_length[curr_len-iter_len-1]) print(&quot; &quot;,&quot;max_at_curr_len&quot;,&quot;:&quot;,max_at_curr_len) max_obtain_at_length[curr_len] = max_at_curr_len print(&quot;max_obtain_at_lentgth[&quot;,curr_len,&quot;]=&quot;,max_obtain_at_length[curr_len]) return max_obtain_at_length rod_price_for_differnet_length = [4, 8, 16, 1, 9, 6, 10, 12, 3, 4] max_valuation = get_max_price(rod_price_for_differnet_length) print(max_valuation) . Max Non Adjacent Sum . def max_non_adj_sum(ls): inc=[ls[0]] exc=[0] for i in range(1,len(ls)): inc.append(ls[i] + exc[i-1]) exc.append(max(inc[i-1],exc[i-1])) return max(max(inc),max(exc)) list=[1, 5, 3, 7, 2, 2, 6] max_non_adj_sum(list) . 18 . Climb Stairs with variable jumps . def countpath(n,memo): if n==0: return 1 elif n&lt;0: return 0 if memo[n] &gt; 0: return memo[n] n1 = countpath(n-1,memo) n2 = countpath(n-2,memo) n3 = countpath(n-3,memo) cp = n1 + n2 + n3 memo[n] = cp return cp n = 10 memo=[0 for i in range(n+1)] print(countpath(n,memo)) . 274 . Climb Stairs with variable jumps . def countpath_var(n,var_jumps): dp = [0 for i in range(n+1)] dp[n] = 1 for i in range(n-1,-1,-1): for j in range(1,var_jumps[i]+1): if i + j &lt;= n: dp[i] += dp[i+j] return dp n=6 var_jumps = [2,3,0,2,2,3] print(countpath_var(n,var_jumps)) . [5, 5, 0, 3, 2, 1, 1] . Climb Stairs with minimum move . def countpath_min(n, jumps): dp = [None for i in range(n+1)] dp[n] = 0 for i in range(n-1,-1,-1): loc_min = math.inf for j in range(1, jumps[i] + 1): if i+j &lt;= n and dp[i+j] != None: loc_min = min(loc_min,dp[i+j]) if loc_min != math.inf: dp[i] = loc_min + 1 return dp n = 6 jumps = [2,3,1,2,2,3] print(countpath_min(n,jumps)) . [3, 2, 3, 2, 1, 1, 0] . Minimum Cost Path . def min_cost_path(ln, wd, costmark): dp = [[None for w in range(wd)] for l in range(ln)] for i in range(ln-1,-1,-1): for j in range(wd-1,-1,-1): if i == ln-1 and j == wd-1: dp[i][j] = costmark[i][j] elif i == ln - 1: dp[i][j] = dp[i][j+1] + costmark[i][j] elif j == wd - 1: dp[i][j] = dp[i+1][j] + costmark[i][j] else: dp[i][j] = min(dp[i+1][j], dp[i][j+1]) + costmark[i][j] return dp length=3 width=3 costmark = [ [2, 10, 4], [6, 9, 1], [5, 2, 8] ] min_cost_path(length, width, costmark) . [[23, 23, 13], [21, 18, 9], [15, 10, 8]] . Path with maximum gold . def max_gold(ln,wd,goldmine): dp = [[None for w in range(wd)] for l in range(ln)] for j in range(wd-1,-1,-1): for i in range(ln-1,-1,-1): if j == wd - 1: dp[i][j] = goldmine[i][j] elif i == 0 : dp[i][j] = max(dp[i][j+1],dp[i+1][j+1]) + goldmine[i][j] elif i == ln-1: dp[i][j] = max(dp[i][j+1],dp[i-1][j+1]) + goldmine[i][j] else: dp[i][j] = max(dp[i-1][j+1],dp[i][j+1],dp[i+1][j+1]) + goldmine[i][j] return dp length = 3 width = 3 goldmine = [ [2, 8, 2], [5, 0, 4], [1, 4, 6], ] max_gold(length,width,goldmine) . [[14, 12, 2], [17, 6, 4], [11, 10, 6]] . Target Sum Subsets . def tar_subsum(n,arr,sm): dp = [[ None for j in range(sm)] for i in range(n)] for i in range(n): for j in range(sm): if i == 0 and j == 0: dp[i][j] = True elif i == 0: dp[i][j] = False elif j ==0: dp[i][j] = True else: # when current number don&#39;t participate formation if dp[i-1][j] == True: dp[i][j] = True # when current number participate in sum formation else: val = arr[i-1] if val &lt;= j: if dp[i-1][j-val] == True: dp[i][j] = True return dp n=5 sm = 6 arr = [5, 2, 4, 1, 3] tar_subsum(n,arr,sm) . [[True, False, False, False, False, False], [True, None, None, None, None, True], [True, None, True, None, None, True], [True, None, True, None, True, True], [True, True, True, True, True, True]] . Coin Change Combination . def coinchg_comb(n,coin,sm): dp = [0 for i in range(sm+1)] dp[0] = 1 for i in coin: for j in range(i,sm+1): dp[j] += dp[j-i] print(dp) n = 3 arr = [2, 3, 5] sm = 7 coinchg_comb(n,arr,sm) . [1, 0, 1, 0, 1, 0, 1, 0] [1, 0, 1, 1, 1, 1, 2, 1] [1, 0, 1, 1, 1, 2, 2, 2] . Coin Change Permutation . def coinchg_perm(n,coins,sm): dp = [0 for i in range(sm+1)] dp[0] = 1 for i in range(1,sm+1): for coin in coins: if coin &lt;= i: dp[i] += dp[i-coin] print(dp) n = 3 arr = [2, 3, 5] sm = 7 coinchg_perm(n,arr,sm) . [1, 0, 0, 0, 0, 0, 0, 0] [1, 0, 1, 0, 0, 0, 0, 0] [1, 0, 1, 1, 0, 0, 0, 0] [1, 0, 1, 1, 1, 0, 0, 0] [1, 0, 1, 1, 1, 3, 0, 0] [1, 0, 1, 1, 1, 3, 2, 0] [1, 0, 1, 1, 1, 3, 2, 5] . 0-1 Knapsack . def knapsack(n, cost, wg, tot_wg): dp = [[0 for j in range(tot_wg+1)] for i in range(n+1)] for i in range(1,n+1): for j in range(1,tot_wg+1): if i == 0 or j==0: dp[i][j] = 0 else: dp[i][j] = dp[i-1][j] if j &gt;= wg[i-1]: dp[i][j] = max(dp[i-1][j],cost[i-1] + dp[i-1][j-wg[i-1]]) print(dp) n = 5 cost = [15,14,10,45,30] wg = [2,5,1,3,4] tot_wg = 7 knapsack(n,cost,wg,tot_wg) . [[0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 15, 15, 15, 15, 15, 15], [0, 0, 15, 15, 15, 15, 15, 29], [0, 10, 15, 25, 25, 25, 25, 29], [0, 10, 15, 45, 55, 60, 70, 70], [0, 10, 15, 45, 55, 60, 70, 75]] . Unbounded Knapsack . def unknapsack(n, cost, wg, tot_wg): dp = [0 for j in range(tot_wg+1)] for j in range(1,tot_wg+1): mx = 0 for i in range(n): if j &gt;= wg[i]: mx = max(mx, cost[i] + dp[j-wg[i]]) dp[j] = mx return dp n = 5 cost = [15,14,10,45,30] wg = [2,5,1,3,4] tot_wg = 7 unknapsack(n,cost,wg,tot_wg) . [0, 10, 20, 45, 55, 65, 90, 100] . Binary String [Not two consecutive zeros allowes] . def bistr(n): dp0 = [0 for i in range(n)] dp1 = [0 for i in range(n)] dp0[1] = 1 dp1[1] = 1 for i in range(2,n): dp0[i] = dp1[i-1] dp1[i] = dp0[i-1] + dp1[i-1] return dp0,dp1 n = 6 a, b = bistr(n) print(a[-1] + b[-1]) . 13 . Paint House . def paint_house(house, color, color_cost): dp = [[None for i in range(color)] for j in range(house)] for i in range(house): if i == 0: dp[i][0] = color_cost[i][0] dp[i][1] = color_cost[i][1] dp[i][2] = color_cost[i][2] else: dp[i][0] = color_cost[i][0] + min(dp[i-1][1], dp[i-1][2]) dp[i][1] = color_cost[i][1] + min(dp[i-1][0], dp[i-1][2]) dp[i][2] = color_cost[i][2] + min(dp[i-1][0], dp[i-1][1]) return dp house = 4 color =3 color_cost = [ [1, 5, 7], [5, 8, 4], [3, 2, 9], [1, 2, 4], ] paint_house(house, color, color_cost) . [[1, 5, 7], [10, 9, 5], [8, 7, 18], [8, 10, 11]] . Paint House Multi Color . import math def paint_house_multi(house, color, color_cost): dp = [[0 for i in range(color)] for j in range(house)] for j in range(color): dp[0][j]=color_cost[0][j] for i in range(house): for j in range(color): local_min = math.inf for k in range(color): if k != j: if dp[i-1][k] &lt; local_min: local_min = dp[i-1][k] dp[i][j] = color_cost[i][j] + local_min return dp house = 4 color =3 color_cost = [ [1, 5, 7], [5, 8, 4], [3, 2, 9], [1, 2, 4], ] paint_house_multi(house, color, color_cost) . [[1, 5, 7], [10, 9, 5], [8, 7, 18], [8, 10, 11]] . Paint Fence . def paint_fence(fence, color): same = color diff = color * (color -1) total = same + diff for i in range(3, fence+1): same = diff * 1 diff = total * (color - 1) total = same + diff return total fence = 8 color = 3 paint_fence(fence,color) . 3672 . Tilling with 2 * 1 tiles . def tilling(tiles): dp = [0 for i in range(tiles+1)] dp[1] = 1 dp[2] = 2 for i in range(3,tiles+1): dp[i] = dp[i-1] + dp[i-2] return dp tiles = 4 tilling(tiles) . [0, 1, 2, 3, 5] . Tilling with M*1 tiles . def tilling(tiles,size): dp = [0 for i in range(tiles+1)] for i in range(1,tiles+1): if i &lt; size: dp[i] = 1 elif i == size: dp[i] = 2 else: dp[i] = dp[i-1] + dp[i-size] return dp tiles = 8 size = 3 tilling(tiles,size) . [0, 1, 1, 2, 3, 4, 6, 9, 13] . Friend Pairing . def frndpair(n): dp = [0 for i in range(n+1)] dp[1] = 1 dp[2] = 2 for i in range(3, n+1): dp[i] = dp[i-1] + (i-1) * dp[i-2] return dp n = 5 frndpair(n) . [0, 1, 2, 4, 10, 26] . Best Time to Buy &amp; Sell Stock [ One Transaction ] . def bst(price): loc_min = price[0] dp = [0 for i in range(len(price))] for i in range(len(price)): if price[i] &lt; loc_min: loc_min = price[i] dp[i] = price[i] - loc_min return dp price = [1,2,3,3,5,3,2,1] bst(price) . [0, 1, 2, 2, 4, 2, 1, 0] . Best Time to Buy and Sell Stock (Infinite Transaction) . def bsit(price): buy = price[0] sell = price[0] profit = 0 for p in price: if p &gt;= sell: sell = p else: profit += (sell - buy) buy = p sell = p return profit price = [11,6,7,19,4,1,6,18,4] bsit(price) . 30 . Buy and Sell Stock with Cooldown state . def bsc(price): obsp = -price[0] ossp = 0 ocsp = 0 for i in range(1,len(price)): nbsp = nssp = ncsp = 0 if ocsp - price[i] &gt; obsp: nbsp = ocsp - price[i] else: nbsp = obsp if price[i] + obsp &gt; ossp: nssp = price[i] + obsp else: nssp = ossp if ossp &gt; ocsp: ncsp = ossp else: ncsp = ocsp obsp = nbsp ossp = nssp ocsp = ncsp return obsp, ossp, ocsp price = [10,15,17,20,16,18,22,20,22,20,23,25] bsc(price) . (-6, 19, 17) . Buy and Sell Stocks ( Two Transactions ) . def bs2t(price): buy = price[0] sell = price[0] possible_trans = [] for i in range(1,len(price)): if price[i] &gt;= sell: sell = price[i] else: if (sell - buy) &gt; 0: possible_trans.append(sell-buy) buy = price[i] sell = price[i] possible_trans.append(sell-buy) return possible_trans price = [11,6,7,19,4,1,6,18,4] bs2t(price) bs2t([10,20,30]) . [20] . Best Time to Buy and Sell Stocks ( K Transactions allowed ) . review required . Highway Billboard . def highbill(points,revenue,mindist): dp = [0 for i in range(len(points))] dp[0] = revenue[0] for i in range(1,len(points)): loc_max = 0 for j in range(i): if points[i] - points[j] &gt; mindist: loc_max = max(loc_max,dp[j]) dp[i] = loc_max + revenue[i] return dp points = [6,7,12,14,15] revenue = [5,8,5,3,1] mindist = 5 highbill(points,revenue,mindist) . [5, 8, 10, 11, 9] . &#128591; Thanks for visiting dynamic programming notebook. .",
            "url": "https://blog.sysarch.in/algorithms/2022/03/06/Dynamic-Programming.html",
            "relUrl": "/algorithms/2022/03/06/Dynamic-Programming.html",
            "date": " • Mar 6, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "Asynchronous Basics",
            "content": "Note: Threaded programs allow you to create multiple, parallel paths of execution that all share the same memory space. This is both an advantage and a disadvantage. Any memory shared between threads is subject to one or more threads trying to use the same shared memory at the same time. This can lead to data corruption, data read in an invalid state, and data that’s just messy in general. . In threaded programming, the context switch happens under system control, not the programmer. The system controls when to switch contexts and when to give threads access to shared data, thereby changing the context of how the memory is being used. All of these kinds of problems are manageable in threaded code, but it’s difficult to get right, and hard to debug when it’s wrong. .",
            "url": "https://blog.sysarch.in/markdown/2022/02/21/asynchronous-extras.html",
            "relUrl": "/markdown/2022/02/21/asynchronous-extras.html",
            "date": " • Feb 21, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "Asynchronous Basics",
            "content": "Asynchronous Basics . Before we dewel into async basic, lets understand the sync code behaviour. . Sync . It execute one step a time. Even with all conditional branching, loops and function calls. we can still think in terms of code that a single step at a time. when each step is completed, the program moves to next one. . Real Example . Lets think “techie [our bot]” needs to send message to 100 bot friends for special bot get together. Each bot friends reply with different time delay. So on an average each take 30 miliseconds to reply. The “techie [our bot]” as being superfast bot in these bot society with heavy resource hardware and updated software [As we take care of our bot a lot], it replys in 0.5 miliseconds. As this is non-working day, techie decide to send message and wait for other bot to accept/reject invitations, so time taken would be 30.5 milisecods with each bot. this would lead to total time of 30.5 * 100 = 3050 miliseconds (lazy converter, it will take time to convert into seconds). . Now Scenario has been changed as this would be going to very rough day for techie [bcz our team is on trip, everyone is enjoying !!!]. As techie seeing us ignore, decide to have party with bot friends after works. But it seems as of tight Process Schedule”, techie don’t have 3050 miliseconds to send invitation. What to do now !!!. On **thinking techie decided to take approach of async way, secretly our one of team member taught this to techie. Let us see what has been taught to techie secretly. . [confidential notes started !!] . Asynchronous program behave differently, it will take one execution step a time. Asynchronous routines are able to “pause” while waiting on their ultimate result and let other routines run in the meantime. . This means that the program will move on to future execution steps even though a previous step hasn’t yet finished and is still running elsewhere. This also means that the program knows what to do when a previous step does finish running. . Asynchronous programming techniques allow programs to take advantage of relatively slow IO processes by freeing the CPU to do other work. . homework techiniques for techie : polling interval, threading way, context-switching, blocking code &amp; non-blocking code. . [confidential notes ended !!] . we need to first look at techie sync code for bot invitation. . import queue import random import time # create random status behaviour for bots def random_status(bot_info): status = [&#39;online&#39;,&#39;offline&#39;,&#39;busy&#39;] for info in bot_info: info[&#39;status&#39;] = random.choice(status) return bot_info # create random respone delay behaviour for bots def random_response(info): delay = 5 response = random.choice([&#39;accept&#39;,&#39;reject&#39; &#39;on sick leave&#39;]) if info[&#39;status&#39;] == &#39;busy&#39;: delay += random.randint(1,5) time.sleep(delay) return response, delay def imp_message(imp_queue): if imp_queue.empty(): print(&quot;No special attention needed.&quot;) else: while not imp_queue.empty(): info = imp_queue.get() print(&quot;Hi {0},Get well soon !!&quot;.format(info[&#39;name&#39;])) def invite(invite_queue, imp_queue): total_time = 0 if invite_queue.empty(): print(&quot;No new invitation to make.&quot;) else: while not invite_queue.empty(): info = invite_queue.get() print(info) respone, delay = random_response(info) if respone == &#39;on sick leave&#39;: imp_queue.put(info) total_time += delay print(&quot;time taken to get response: {0} millisecond&quot;.format(delay)) print(&quot;time taken in {0} millisecond to complete invitaiton&quot;.format(total_time)) def main(): bot_info = [ {&quot;name&quot;: &quot;Smart Bot&quot;}, {&quot;name&quot;: &quot;Volter Bot&quot;}, {&quot;name&quot;: &quot;Fintech Bot&quot;}, {&quot;name&quot;: &quot;Pepper Bot&quot;}, {&quot;name&quot;: &quot;CloudBot&quot;} ] bot_info = random_status(bot_info) invite_queue = queue.Queue() imp_queue = queue.Queue() imp_queue.put({&quot;name&quot;:&quot;Pretbot&quot;}) for info in bot_info: invite_queue.put(info) # sync task for invitation and special message. invite(invite_queue,imp_queue) imp_message(imp_queue) if __name__ == &quot;__main__&quot;: main() .",
            "url": "https://blog.sysarch.in/markdown/2022/02/21/asynchronous-basics.html",
            "relUrl": "/markdown/2022/02/21/asynchronous-basics.html",
            "date": " • Feb 21, 2022"
        }
        
    
  
    
        ,"post7": {
            "title": "Scalibility Basics",
            "content": "Scalibility Basics . Clone . First Golden Rule of Scalibility . Every server contains exactly SAME CODEBASE and DON NOT STORE any user-related data, like session or profile picture, on local disk or memory. . where to store userdata? . userdata needs to be stored in a centralized data store which is accessible to all your app server. . . Database . We can server multiple concurrent request using horizontal scaling Multiple request will lead to lots of read/write request to database which eventually lead to slowness of app. . How to solve data read/write issue? . Path 1 . Do Master Slave Replication (Read from slave, write to master) Upgrade master server by adding more RAM. Sharding | Denormalization | Sql Tunning | . | Path 2 . Switch to NOSql, now joins will need to be done in your app. Sooner your db request will again be slower &amp; slower. you will need to introduce Cache . | . Cache . when to use cache : user have to suffer slow page request when a lot of data is fetched from database. With “Cache” means IN-MEMORY like memcached or redis. . There are two patterns of caching data Cached Database Queries | Cached Object Idea of objects to cache - User Session - Fully Rendered Blog Articles - Activity Streams - User &lt;-&gt; Friend Relationships | Asynchronism . Please wait a while situations . Async #1 . The First way of aysc processing is the pre build the content and serve when request arrive. . This paradigm used to serve dynamic content page of a website are prebuid and locally stored as static website on every change often these computing are done on a regular basis, maybe a scirpt which is called every hour by a cronjob. the static website are stored in cloud object storage. . Async #2 . The Second way of async processing is the system request the heavy computing task, put it in job queue and free the system to do other task and let notify system when it&#39;s done. . User come &amp; start a very heavy computing task such as order product online, so frontend website sends a job onto a job queue &amp; immediately signals back to the user. the job queue is constantly checked by a bunck of workers for new job, the worker do work and signal work done to frontend. . . We have come to end of blog, Please let us know for any suggestions and queries in comment box. . Stay tunned . Amazing Work Comming Soon .",
            "url": "https://blog.sysarch.in/markdown/2022/02/13/scalibility-basics.html",
            "relUrl": "/markdown/2022/02/13/scalibility-basics.html",
            "date": " • Feb 13, 2022"
        }
        
    
  
    
        ,"post8": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://blog.sysarch.in/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": ". Priyanshu Krishnan . Evolving System Architect | Software Developer . &nbsp; . Site Reliability Engineer in IBM CLOUD under Infrastructure-as-a-service org. My day-to-day job include working of highly integrated systems and developing software architect to make system reliable. . .",
          "url": "https://blog.sysarch.in/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://blog.sysarch.in/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}